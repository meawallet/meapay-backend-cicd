on:
  workflow_call:
    inputs:
      build_command:
        required: true
        type: string
      artifacts_publish_command:
        required: false
        type: string
      docker_build_command:
        required: false
        type: string
      docker_ecr_repository:
        required: false
        type: string
      slack_channel_id:
        required: false
        type: string
      app_path:
        required: false
        type: string
      app_name:
        required: true
        type: string
      service_name:
        required: false
        type: string
      deploy_repo:
        required: false
        type: string
      deploy_namespace:
        required: false
        type: string

    secrets:
      aws_ca_domain:
        description: 'AWS_CA_DOMAIN'
        required: false
      aws_ca_owner_id:
        description: 'AWS_CA_OWNER_ID'
        required: false
      aws_role_to_assume:
        description: 'AWS_ROLE_TO_ASSUME'
        required: false
      aws_env_account_id:
        description: 'AWS_ROLE_TO_ASSUME'
        required: false
      slack_bot_token:
        description: 'SLACK_BOT_TOKEN'
        required: false
      slack_channel_id:
        description: 'SLACK_CHANNEL_ID'
        required: false
      cd_token:
        description: 'CD_TOKEN'
        required: false

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: "Setup: Checkout"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: "Setup: Java"
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: "Setup: AWS Credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.aws_role_to_assume }}
          aws-region: eu-central-1

      - name: "Setup: Initialize variables"
        id: vars
        run: |
          codeartifact_token=$(aws codeartifact get-authorization-token --domain ${{ secrets.aws_ca_domain }} --domain-owner ${{ secrets.aws_ca_owner_id }} --query authorizationToken --output text)
          echo "::add-mask::$codeartifact_token"
          echo "::set-output name=codeartifact_auth_token::$codeartifact_token"
          echo "::set-output name=run_url::https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo "::set-output name=ENV_AWS_ACCOUNT_ID::${{ secrets.AWS_ACCOUNT_ID_DEV }}"

      - name: "Setup: Increment version"
        id: version
        uses: paulhatch/semantic-version@v4
        with:
          tag_prefix: "release-"
          format: "${major}.${minor}.${patch}"

      - name: Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: ${{ inputs.build_command }} -PmavenUser=aws -PmavenPassword=${{ steps.vars.outputs.codeartifact_auth_token }}

      - name: "Build Image: Copy Dockerfile and related into current repository"
        run: |
          git clone --branch feature/AT-333 https://.:${{ secrets.GITHUB_TOKEN }}@github.com/meawallet/meapay-backend-cicd softpos-buildstack

      - name: "Build Image: Set up Docker Buildx"
        uses: docker/setup-buildx-action@v1

      - name: "Build image: move jar file to root location"
        uses: canastro/copy-file-action@master
        with:
          source: "app-artifact/${{ inputs.app_name }}-app.jar"
          target: "${{ inputs.app_name }}.jar"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.aws_env_account_id }}.dkr.ecr.eu-central-1.amazonaws.com

      - name: "Build Image: Docker build java image and push to ECR"
        uses: docker/build-push-action@v2
        with:
          context: .
          file: softpos-buildstack/Dockerfile
          build-args: |
            APP_NAME=${{ inputs.app_name }}
            JVM_OPTS="-Xms1024m -Xmx2048m"
          push: true
          tags: ${{ secrets.aws_env_account_id }}.dkr.ecr.eu-central-1.amazonaws.com/${{ inputs.service_name }}:${{ steps.version.outputs.version_tag }},${{ secrets.aws_env_account_id }}.dkr.ecr.eu-central-1.amazonaws.com/${{ inputs.service_name }}:latest

      - name: "Publish: Create and push tag"
        if: ${{ success() && inputs.build_command != 0 }}
        run: |
          git tag ${{ steps.version.outputs.version_tag }}
          git push origin ${{ steps.version.outputs.version_tag }}

      - name: "Deploy: Dispatch deployment to the development"
        if: ${{ success() && inputs.service_name != 0 && inputs.deploy_repo != 0 }}
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.cd_token }}
          event-type: dev-release
          client-payload: '{"service_name": "${{ inputs.app_name }}", "image_version": "${{ steps.version.outputs.version_tag }}"}'
          repository: ${{ inputs.deploy_repo }}

      - name: "Notify: Slack"
        id: slack
        if: ${{ failure() && inputs.slack_channel_id != 0 }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_bot_token }}
        uses: slackapi/slack-github-action@v1.18.0
        with:
          channel-id: ${{ inputs.slack_channel_id }}
          slack-message: Pipeline failed ${{ steps.vars.outputs.run_url }}
